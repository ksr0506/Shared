# Using JObject.Properties
# Json Data Parse 후 jObject를 이용하여 보통 Value를 많이 출력을 했지만, Json Data의 Name과 Value를 호출 하는 방법
# 참조 : https://www.newtonsoft.com/json/help/html/jobjectproperties.htm

# ------------------------------------------------------------------------------------------------------------- #

JObject o = new JObject
{
    { "name1", "value1" },
    { "name2", "value2" }
};

foreach (JProperty property in o.Properties())
{
    Console.WriteLine(property.Name + " - " + property.Value);
}
// name1 - value1
// name2 - value2

foreach (KeyValuePair<string, JToken> property in o)
{
    Console.WriteLine(property.Key + " - " + property.Value);
}
// name1 - value1
// name2 - value2

# ------------------------------------------------------------------------------------------------------------- #

# UiPath 적용
For each jPropertyItem in Newtonsoft.Json.Linq.JObject.Parse(JsonString)

  WriteLine(String.Format("[Name : {0}][Value : {1}]", jPropertyItem.Name, jPropertyItem.Value))
Next jPropertyItem

# ------------------------------------------------------------------------------------------------------------- #

# dataTable 형식으로도 가능(단, 판토스 Config 타입(key/value과 같은 경우에만)

# Dictionary(Of String, String) > Json String
JsonConvert.SerializeObject(io_dic_ConfigExcel)

# Json String > Dictionary(Of String, String)
JsonConvert.DeserializeObject(Of Dictionary(Of String, String))(str_AssetContents_Before)

# ------------------------------------------------------------------------------------------------------------- #

# HTTP Request - Result Ouput Format Sample
String.Format("1. EndPoint : {1}{0}{0}2. Parameter :{0}{2}{0}{0}3. Result :{0}{3}{0}{0}4. Status Code : {4}",Environment.NewLine,sEndpoint,jObjectJsonBody.ToString,jObjectResult.ToString,iStatusCode)
